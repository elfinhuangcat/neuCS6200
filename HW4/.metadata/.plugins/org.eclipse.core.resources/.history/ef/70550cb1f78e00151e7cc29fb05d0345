import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.core.SimpleAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.MultiFields;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.TermsEnum;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.util.Version;

public class SearchEngineLucene {
	private static Analyzer sAnalyzer = new SimpleAnalyzer(Version.LUCENE_47);

	private IndexWriter writer;
	private ArrayList<File> queue = new ArrayList<File>();
	
	private static String TF_FILENAME = "TermFrecrency.txt";

	/**
	 * Constructor
	 * 
	 * @param indexDir
	 *            the name of the folder in which the index should be created
	 * @throws java.io.IOException
	 *             when exception creating index.
	 */
	SearchEngineLucene(String indexDir) throws IOException {

		FSDirectory dir = FSDirectory.open(new File(indexDir));

		IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_47,
				sAnalyzer);

		writer = new IndexWriter(dir, config);
	}

	/**
	 * Indexes a file or directory
	 * 
	 * @param fileName
	 *            the name of a text file or a folder we wish to add to the
	 *            index
	 * @throws java.io.IOException
	 *             when exception
	 */
	public void indexFileOrDirectory(String fileName) throws IOException {
		// ===================================================
		// gets the list of files in a folder (if user has submitted
		// the name of a folder) or gets a single file name (is user
		// has submitted only the file name)
		// ===================================================
		addFiles(new File(fileName));

		int originalNumDocs = writer.numDocs();
		for (File f : queue) {
			FileReader fr = null;
			try {
				Document doc = new Document();

				// ===================================================
				// add contents of file
				// ===================================================
				fr = new FileReader(f);
				doc.add(new TextField("contents", fr));
				doc.add(new StringField("path", f.getPath(), Field.Store.YES));
				doc.add(new StringField("filename", f.getName(),
						Field.Store.YES));

				writer.addDocument(doc);
				System.out.println("Added: " + f);
			} catch (Exception e) {
				System.out.println("Could not add: " + f);
			} finally {
				fr.close();
			}
		}

		int newNumDocs = writer.numDocs();
		System.out.println("");
		System.out.println("************************");
		System.out
		.println((newNumDocs - originalNumDocs) + " documents added.");
		System.out.println("************************");

		queue.clear();
	}

	private void addFiles(File file) {

		if (!file.exists()) {
			System.out.println(file + " does not exist.");
		}
		if (file.isDirectory()) {
			for (File f : file.listFiles()) {
				preprocess(f);
				addFiles(f);
			}
		} else {
			String filename = file.getName().toLowerCase();
			// ===================================================
			// Only index text files
			// ===================================================
			if (filename.endsWith(".htm") || filename.endsWith(".html")
					|| filename.endsWith(".xml") || filename.endsWith(".txt")) {
				queue.add(file);
			} else {
				System.out.println("Skipped " + filename);
			}
		}
	}
	
	/**
	 * Remove the html tags
	 * @param f
	 * @throws UnsupportedEncodingException 
	 */
	private void preprocess(File f) throws UnsupportedEncodingException {
		try {
			String fileName = f.getName();
			File tempFile = new File("temp.txt");

			BufferedReader reader = new BufferedReader(new FileReader(f));
			PrintWriter writer = new PrintWriter(tempFile.getName(), "UTF-8");

			String line;
			while((line = reader.readLine()) != null) {
			    // trim newline when comparing with lineToRemove
			    String trimmedLine = line.trim();
			    if(trimmedLine.startsWith("<") && trimmedLine.contains(">")) continue;
			    writer.write(currentLine + System.getProperty("line.separator"));
			}
			writer.close(); 
			reader.close(); 
			boolean successful = tempFile.renameTo(inputFile);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
     * Close the index.
     * 
     * @throws java.io.IOException
     *             when exception closing
     */
    public void closeIndex() throws IOException {
	writer.close();
    }
    
    public void createTF(File tfFile, IndexReader reader) throws IOException {
    	PrintWriter writer = new PrintWriter(tfFile.getName(), "UTF-8");
    	TermsEnum itr = MultiFields.getFields(reader).terms("contents").iterator(null);
        BytesRef term = null;
        while ((term = itr.next()) != null) {
        	String termText = term.utf8ToString();
        	
        	Term termInstance = new Term("contents", term);                              
        	long termFreq = reader.totalTermFreq(termInstance);

        	writer.println(termText + "\t" + termFreq);
        }
        writer.close();
    }
    
    /**
     * Main Function
     * @param args
     *     args[0] full path to the index folder
     *     args[1] "-i" (don't add files) OR
     *             full path to files that need to be added to the index
     *     args[2] full path to query file
     * @throws IOException
     * 
     * Outputs:
     * 1. Term frequency file named [TF_FILENAME] in the same dir as the jar
     * 2. Index dir specified in args[0]
     */
    public static void main(String[] args) throws IOException {
		
		String indexLocation = args[0];
		
		SearchEngineLucene indexer = null;
		try {
			indexer = new SearchEngineLucene(indexLocation);
		} catch (Exception ex) {
			System.out.println("ERROR - Cannot create index...\n" + ex.getMessage());
			System.exit(-1);
		}

		// read input from the dir(args[1])
		String fileLoc = args[1];
		try {
			if (!fileLoc.equalsIgnoreCase("-i")) {
				// try to add file into the index
				indexer.indexFileOrDirectory(fileLoc);
			}
		} catch (Exception e) {
			System.out.println("ERROR - Error indexing " + fileLoc + " : "
					+ e.getMessage());
		}

		// ===================================================
		// after adding, we always have to call the
		// closeIndex, otherwise the index is not created
		// ===================================================
		indexer.closeIndex();
		
		// =========================================================
		// Creates the term-tf list
		// =========================================================
		IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(
				indexLocation)));
		try {
			File tfFile = new File(TF_FILENAME);
			if (!tfFile.exists()) {
				tfFile.createNewFile();
			}
			indexer.createTF(tfFile, reader);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// =========================================================
		// Now search
		// =========================================================
		//IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(
		//		indexLocation)));
		IndexSearcher searcher = new IndexSearcher(reader);
		TopScoreDocCollector collector = TopScoreDocCollector.create(3, true);
		
		BufferedReader br = new BufferedReader(new FileReader(args[2]));
		String s = "";
		while (!s.equalsIgnoreCase("q")) {
			try {
				System.out.println("Enter the search query (q=quit):");
				s = br.readLine();
				if (s.equalsIgnoreCase("q")) {
					break;
				}

				Query q = new QueryParser(Version.LUCENE_47, "contents",
						sAnalyzer).parse(s);
				searcher.search(q, collector);
				ScoreDoc[] hits = collector.topDocs().scoreDocs;

				// 4. display results
				System.out.println("Found " + hits.length + " hits.");
				for (int i = 0; i < hits.length; ++i) {
					int docId = hits[i].doc;
					Document d = searcher.doc(docId);
					System.out.println((i + 1) + ". " + d.get("path")
							+ " score=" + hits[i].score);
				}
				// 5. term stats --> watch out for which "version" of the term
				// must be checked here instead!
				Term termInstance = new Term("contents", s);
				long termFreq = reader.totalTermFreq(termInstance);
				long docCount = reader.docFreq(termInstance);
				System.out.println(s + " Term Frequency " + termFreq
						+ " - Document Frequency " + docCount);

			} catch (Exception e) {
				System.out.println("Error searching " + s + " : "
						+ e.getMessage());
				break;
			}

		}
		br.close();

	}
}